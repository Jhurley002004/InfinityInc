import requests
from requests.exceptions import ConnectTimeout, HTTPError, Timeout, RequestException
import os
import random
from dotenv import load_dotenv

load_dotenv()

# TheMovieDB version, 3 is latest
API_VERSION = "3"

class MovieAPI:
    """Class to handle queries to theMovieDB. Requires .env file with valid API key (ask team or check readme if confused about this)."""
    
    
    def __init__(self):
        self.auth = os.environ['API_KEY']


    def query_moviedb(self, query):
        """Queries TheMovieDB with query argument.
        Query = String, be sure to include ?include_adult=false unless you want things to get awkward"""
        url = f"https://api.themoviedb.org/{API_VERSION}/{query}"

        headers = {
            "accept": "application/json",
            "Authorization": self.auth,
        }

        try:
            response = requests.get(url, headers=headers)
        except (ConnectTimeout, HTTPError, Timeout, RequestException) as e:
            print(f"An error occurred: {e}")
            return None
        
        return response.json()
        
        
    def get_similar_movies(self, movie_id):
        """Returns dictionary of movies similar to movie_id as generated by TheMovieDB
        movie_id = String"""
        query = f"movie/{movie_id}/similar?language=en-US&page=1&include_adult=false"
        return self.query_moviedb(query)


    def get_movie_by_id(self, movie_id):
        """Returns dictionary of movie data at movie_id
        movie_id = String"""
        query = f"movie/{movie_id}?include_adult=false"
        return self.query_moviedb(query)
    

    def get_random_movie(self):
        # query latest movie to get max ID value
        query = f"movie/latest?include_adult=false"
        latest_movie = self.query_moviedb(query)
        max_id = latest_movie["id"]
        random_id = random.randint(1, int(max_id))
        print(random_id)
        return self.get_movie_by_id(random_id)
